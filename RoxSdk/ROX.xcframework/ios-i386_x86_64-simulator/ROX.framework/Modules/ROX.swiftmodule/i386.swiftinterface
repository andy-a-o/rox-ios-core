// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target i386-apple-ios8.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ROX
import Foundation
import ROXCore
import Swift
public protocol RoxContainer : AnyObject {
  var namespace: Swift.String? { get }
}
extension RoxContainer {
  public var namespace: Swift.String? {
    get
  }
}
public class RoxEnumVariant<T> where T : Swift.RawRepresentable, T.RawValue == Swift.Int {
  public init(_ defaultValue: T)
  public init(_ defaultValue: T, freeze: ROXFreeze)
  public var value: T {
    get
  }
  public var name: Swift.String {
    get
  }
  public var objcBridge: ROXVariant {
    get
  }
  public func unfreeze()
  @objc deinit
}
public typealias RoxSelfManagedOptions = ROXSelfManagedOptions
public typealias RoxOptions = ROXOptions
public typealias RoxOptionsVerboseLevel = ROXOptionsVerboseLevel
public typealias RoxExperiment = ROXExperiment
public typealias RoxReportingValue = ROXReportingValue
public typealias RoxFetcherResult = ROXFetcherResult
public typealias RoxFreeze = ROXFreeze
public typealias RoxFlag = ROXFlag
public typealias RoxConfigurationString = ROXConfigurationString
public typealias RoxConfigurationInt = ROXConfigurationInt
public typealias RoxConfigurationDouble = ROXConfigurationDouble
public typealias RoxConfigurationBool = ROXConfigurationBool
public class ROX {
  public static func setup(withKey key: Swift.String)
  public static func setup(withKey key: Swift.String, options: ROXOptions)
  public static func register(_ namespace: Swift.String, container: RoxContainer)
  public static func unfreeze()
  public static func flagsViewController() -> UIKit.UIViewController
  public static func setCustomProperty(key: Swift.String, value: Swift.String)
  public static func setCustomProperty(key: Swift.String, asSemver: Swift.Bool, value: Swift.String)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?) -> Swift.String)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.String)
  public static func setCustomProperty(key: Swift.String, asSemver: Swift.Bool, value: @escaping (Swift.String?) -> Swift.String)
  public static func setCustomProperty(key: Swift.String, asSemver: Swift.Bool, value: @escaping () -> Swift.String)
  public static func setCustomProperty(key: Swift.String, value: Swift.Bool)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?) -> Swift.Bool)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.Bool)
  public static func setCustomProperty(key: Swift.String, value: Swift.Int32)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?) -> Swift.Int32)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.Int32)
  public static func setCustomProperty(key: Swift.String, value: Swift.Double)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?) -> Swift.Double)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.Double)
  public static func fetch()
  public static func overrides() -> ROXFlagsOverrides
  public static func flags() -> [ROXVariant]
  @objc deinit
}
